import requests
import json
import argparse


def get_vulnerability_data(cve_number):
    url = f"https://api.msrc.microsoft.com/sug/v2.0/en-GB/vulnerability/{cve_number}"

    # Send a GET request to the API endpoint
    headers = {
        "Accept": "application/json",
       
    }

    response = requests.get(url, headers=headers)

    # Check if the request was successful (status code 200)
    if response.status_code == 200:
        # Parse the JSON response
        vulnerability_data = response.json()
        return vulnerability_data
    else:
        #print(f"Failed to retrieve data for CVE-{cve_number}. Status code: {response.status_code}")
        return None
    
def main():
    parser = argparse.ArgumentParser(description="Retrieve information for a CVE from Microsoft API.")
    parser.add_argument("cve_number", nargs="?", help="CVE number to retrieve information for, example CVE-2024-1234.")
    parser.add_argument("-f", "--file", help="Read CVE numbers from a file. One CVE number per line in a format like CVE-2024-1234.")
    parser.add_argument("-only-exploited", action="store_true", help="This will only return output if the value of exploited is yes.")
    parser.add_argument("-only-public", action="store_true", help="This will only return output only if the value of publically disclosed is Yes.")

    args = parser.parse_args()

    if args.file:
        # Read CVE numbers from the specified file
        with open(args.file, "r") as file:
            cve_numbers = [line.strip() for line in file.readlines()]
    elif args.cve_number:
        # Use the single CVE number provided as a command line argument
        cve_numbers = [args.cve_number]
    else:
        print("Please provide a CVE number or specify a file using the -f option.")
        return

    # Get vulnerability data for each CVE number
    for cve_number in cve_numbers:
        vulnerability_data = get_vulnerability_data(cve_number)

        if vulnerability_data:
            # Extract data from the response
            cve_number = vulnerability_data.get("cveNumber")
            cve_title = vulnerability_data.get("cveTitle")
            cve_basescore = vulnerability_data.get("baseScore")
            publicly_disclosed = vulnerability_data.get("publiclyDisclosed")
            exploited = vulnerability_data.get("exploited")

            # Output only if exploited or publicly disclosed is Yes
            if args.only_exploited and exploited.lower() == "yes":
                print(f"\n{cve_number}")
                print(f"{cve_title}")
                print(f"CVSS Base Score: {cve_basescore}")
                print(f"Exploited: {exploited}")
            elif args.only_public and publicly_disclosed.lower() == "yes":
                print(f"\n{cve_number}")
                print(f"{cve_title}")
                print(f"CVSS Base Score: {cve_basescore}")
                print(f"Publicly Disclosed: {publicly_disclosed}")
            elif not args.only_exploited and not args.only_public:
                # Output all information if no specific option is provided
                print(f"\n{cve_number}")
                print(f"{cve_title}")
                print(f"CVSS Base Score: {cve_basescore}")
                print(f"Publicly Disclosed: {publicly_disclosed}")
                print(f"Exploited: {exploited}")

if __name__ == "__main__":
    main()
